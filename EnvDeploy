#!/bin/bash
# Copyright (c) 2000-2016 Synology Inc. All rights reserved.

LANG=""
LC_ALL=""
. "$(dirname "$(readlink -f "$0")")/include/init"

Usage() {
	cat << EOF

Usage
	`basename $0` [OPTIONS] -v version

Synopsis
	Deploy build environment for platform(s) of specified version.

Options
	-v, --version {version}
		Specify target DSM version of enviroment.
	-p, --platform {platform}
		Specify target platforms. Default deploy all available platforms for specified version.
	-i, --info platform|project
		Display list of platforms or pre-built projects. Use it with -v to specify version.
	-l, --list
		List available platforms, the same as "--info platform". Use it with -v to specify version.
	-s, --suffix {suffix}
		Specify suffix for destination folder. For example, $SynoBase/build_env-{suffix}
		Default destination folder is $SynoBase/build_env.
	-t, --tarball {dir}
		Extract local {dir}/tarballs rather than download them.
		Names of tarballs should be something like ds.x64-4.2.env.txz or ds.x64-4.2.dev.txz
	-d, --demo
		Default destination folder is $SynoBase/build_env-demo if no suffix is given.
	--preview
		Download preview environment of version specified by -v option.
	--us3
		Download US3 environment of version specified by -v option.
	-c, --clean
		Clean first if destination folder already exists.
	-y, --yes
		Assume "yes" on all questions.
	-h, --help
		This help message.

EOF
}

PromptConfirm() {
	[ $# -ne 1 ] && CheckErrorOut 1 "Wrong number of parameters to $FUNCNAME()."
	local confirm= message="$1"

	echo -e "\n$message"
	read -p "Continue? (y/n)[n]: " confirm
	if [ "$confirm" != "y" -a "$confirm" != "Y" ]; then
		echo -e "Canceled.\n"
		exit 0
	else
		echo -e "Continue ...\n"
	fi
}

SetupEnvironment() {
	[ $# -ne 2 -a $# -ne 3 ] && CheckErrorOut 1 "Wrong number of parameters to $FUNCNAME()."
	local arch="$1" version="$2" build_version="$3" cur_dir="`pwd`" tarball= ret= sub_dir=
	local arch_dir="ds.$arch-$version"

	# Clear
	if grep -q "\s$EnvDir/$arch_dir/proc" /proc/mounts; then
		umount $arch_dir/proc
		CheckErrorOut $? "Fail to unmount $EnvDir/$arch_dir/proc"
	fi
	[ "$DoClean" = "Yes" ] && rm -rf $arch_dir
	mkdir $arch_dir
	cd $arch_dir

	# Download & extract
	[ "$SYNO_DEMO_MODE" = "Yes" ] && version="$version-demo"
	if [ "$SYNO_PREVIEW" = "Yes" ]; then
		sub_dir="$version-preview"
	elif [ "$SYNO_US3" = "Yes" ]; then
		sub_dir="$version-us3"
	elif [ -n "$build_version" ]; then
		sub_dir="$build_version"
	fi

	for tarball_name in ds.$arch-$version.{env,dev}; do
		tarball=
		if [ -n "$SrcTarballDir" ]; then
			for suffix in tgz txz; do
				if [ -f $SrcTarballDir/${tarball_name}.${suffix} ]; then
					tarball=$SrcTarballDir/${tarball_name}.${suffix}
					break
				fi
			done
		else
			for suffix in tgz txz; do
				check_tarball=${tarball_name}.${suffix}
				wget_target=http://$DownloadServer/toolkit/$arch/$sub_dir/${check_tarball}
				if wget -S --spider $wget_target 2>&1 | grep -q 'HTTP/1.1 200 OK'; then
					tarball=${check_tarball}
					break
				fi
			done
			wget -O $tarball $wget_target
			ret=$?
			if [ $ret -ne 0 ] && wget -O notification.txt http://$DownloadServer/toolkit/notification.txt; then
				cat notification.txt
				rm -f notification.txt
				exit 2
			fi
			CheckErrorOut $ret "Fail to download $tarball!!"
		fi

		tar_opt=
		echo "Extract $tarball ..."
		if file -b $tarball | grep -q "XZ compressed"; then
			which pixz &>/dev/null && tar_opt=-Ipixz
		fi
		tar $tar_opt -xhf $tarball
		CheckErrorOut $? "Fail to extract $tarball!!"
		[ -z "$SrcTarballDir" ] && rm -f $tarball
	done

	# TODO Setup $EnvDir/$arch_dir/etc/apt/sources.list and get metapackage
	cd $cur_dir
}

ResolveVersion() {
	[ $# -ne 1 ] && CheckErrorOut 1 "Wrong number of parameters to $FUNCNAME()."

	if [[ $1 =~ ^[0-9]+\.[0-9]+$ ]]; then
		Version="$1"
		BuildVersion=
	elif [[ $1 =~ ^[0-9]+\.[0-9]+-[0-9]+$ ]]; then
		Version="`echo $1 | cut -d'-' -f1`"
		BuildVersion="`echo $1 | cut -d'-' -f2`"
	else
		return 1
	fi
	return 0
}

GetAvailableVersions() {
	local prefix="AvailablePlatform_" line= index= versions=
	while read line; do
		[[ $line =~ ^$prefix[0-9]+_[0-9]+= ]] || continue
		index="`echo $line | cut -d'=' -f1`"
		versions="$versions `echo $index | awk -F'_' '{print $2"."$3}'`"
	done < <(set | grep $prefix)
	echo "$versions"
}

ListAvailablePlatforms() {
	local version="$1" prefix= index= item=
	if [ "$SYNO_DEMO_MODE" = "Yes" ]; then
		prefix="AvailableDemoPlatform_"
		echo -e "\n======== Available Platforms (Demo) ========"
	else
		prefix="AvailablePlatform_"
		echo -e "\n======== Available Platforms ========"
	fi
	if [ -n "$version" ]; then
		index="${prefix}`echo $version | sed 's/\./_/g'`"
		echo "$version: ${!index}"
	else
		for item in `GetAvailableVersions`; do
			index="${prefix}`echo $item | sed 's/\./_/g'`"
			echo "$item: ${!index}"
		done
	fi
	echo ""
}

ListBuiltinProjects() {
	local version= config=
	if [ -f "$ScriptsDir/include/gitutils" ]; then
		config="include/config"
		for version in ${1:-`GetAvailableVersions`}; do
			echo -e "\n======== $version Built-in Projects ========"
			( cd $ScriptsDir; . include/gitutils; GitCheckoutFiles $version $config > /dev/null; . $config; echo $PreBuildProjects; )
		done
	else
		for config in `ls $ScriptsDir/include/projects-${1:-*} | sort`; do
			version="`echo $config | cut -d'-' -f2`"
			echo -e "\n======== $version Built-in Projects ========"
			( . $config; echo $PreBuildProjects; )
		done
	fi
	echo ""
}

ListRequestedInfo() {
	[ $# -lt 1 ] && CheckErrorOut 1 "Wrong number of parameters to $FUNCNAME()."
	case "$1" in
		"platform")
			ListAvailablePlatforms $2
			;;
		"project")
			ListBuiltinProjects $2
			;;
		*)
			echo "Unknown target \"$1\" to list!"
			exit 1
			;;
	esac
}


Args=`getopt -u -l 'version:,platform:,tarball:,suffix:,info:,list,demo,preview,us3,clean,yes,help' v:p:t:s:i:ldcyh $@`
if [ $? -ne 0 ]; then
	echo "You gave me option(s) that I do not know."
	Usage
	exit 1
fi

DoClean="No"
DontAsk="No"

Source include/check
Source include/config
Source include/platforms
Source include/toolkit.config

# Parse options
while [ -n "$1" ]; do
case "$1" in
	"-p" | "--platform")
		Platforms="$2"
		shift
		;;
	"-v" | "--version")
		ResolveVersion $2
		CheckErrorOut $? "$2 is not a valid version/build-number."
		RawVersion="$2"
		shift
		;;
	"-i" | "--info")
		ListOnly="Yes"
		ListTarget="$2"
		shift
		;;
	"-l" | "--list")
		ListOnly="Yes"
		ListTarget="platform"
		;;
	"-s" | "--suffix")
		Suffix="$2"
		shift
		;;
	"-t" | "--tarball")
		[ "${2:0:1}" = "/" ] && SrcTarballDir="$2" || SrcTarballDir="$CurDir/$2"
		shift
		;;
	"-d" | "--demo")
		SYNO_DEMO_MODE="Yes"
		;;
	"--preview")
		SYNO_PREVIEW="Yes"
		;;
	"--us3")
		SYNO_US3="Yes"
		;;
	"-y" | "--yes")
		DontAsk="Yes"
		;;
	"-c" | "--clean")
		DoClean="Yes"
		;;
	"-h" | "--help")
		Usage
		exit 0
		;;
	"--")
		shift
		break
		;;
	*)
		echo "Unhandled option '$1'"
		echo "Something wrong in $0. Please contact maintainer."
		exit 1
		;;
esac
shift
done
if [ "$ListOnly" = "Yes" ]; then
	ListRequestedInfo $ListTarget $Version
	exit 0
fi

ProjectList="$@"  # TODO support to update/upgrade project individually

if [ -z "$Version" ]; then
	read -p "What base version do you want? " RawVersion
	ResolveVersion $RawVersion
	CheckErrorOut $? "$RawVersion is not a valid DSM version."
fi
if [ "$SYNO_DEMO_MODE" = "Yes" ]; then
	PlatformIndex="AvailableDemoPlatform_`echo $Version | sed 's/\./_/g'`"
else
	PlatformIndex="AvailablePlatform_`echo $Version | sed 's/\./_/g'`"
fi
if [ -z "$Platforms" ]; then
	Platforms="${!PlatformIndex}"
else
	for Arch in $Platforms; do
		CheckInList $Arch ${!PlatformIndex}
		CheckErrorOut $? "Environment for $Arch ($Version) is not available."
	done
fi

# Destination folder
if [ -n "$Suffix" ]; then
	EnvDir="$SynoBase/build_env-$Suffix"
elif [ "$SYNO_DEMO_MODE" = "Yes" ]; then
	EnvDir="$SynoBase/build_env-demo"
else
	EnvDir="$SynoBase/build_env"
fi

# Confirm
echo ""
echo "Desired platform: $Platforms"
echo "Desired version: $Version ($RawVersion)"
echo "Destination folder: $EnvDir"
echo "Clean if target exists: $DoClean"
if [ "$DontAsk" != "Yes" ]; then
	PromptConfirm "Continue if above settings are OK."
fi
echo ""

# Deploy
mkdir -p $EnvDir
cd $EnvDir
for Arch in $Platforms; do
	SetupEnvironment $Arch $Version $BuildVersion
	ln -sf `basename ds.$Arch-$Version/usr/bin/python2.[0-9]` ds.$Arch-$Version/usr/bin/python2
	ln -sf pkgscripts-ng ds.$Arch-$Version/pkgscripts
done
cd $CurDir
exit 0
